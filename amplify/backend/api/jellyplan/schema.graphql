type DateMeals @model @auth(rules: [{allow: public}]) {
  id: ID!
  Date: Date! @hasOne
  mealID: ID! @index(name: "byMeal")
}

type Recipe @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  ingredients: AWSJSON
  instructions: AWSJSON
}

type Preparation @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String!
  duration: AWSJSON
}

type MealComponent @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  meals: [Meal] @manyToMany(relationName: "MealMealComponent")
}

type MealTags @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  meals: [Meal] @manyToMany(relationName: "Tags")
}

type Meal @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  isNew: Boolean
  hasLeftovers: Boolean
  isTakeOut: Boolean
  isOpenFreeform: Boolean
  isSpecialOccasion: Boolean
  MealComponents: [MealComponent] @manyToMany(relationName: "MealMealComponent")
  Recipe: Recipe @hasOne
  Preparation: Preparation @hasOne
  Tags: [MealTags] @manyToMany(relationName: "Tags")
  DateMeals: [DateMeals] @hasMany(indexName: "byMeal", fields: ["id"])
}

type Date @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate!
}
 