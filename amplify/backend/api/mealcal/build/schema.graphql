
type Date @aws_iam @aws_api_key {
  id: ID!
  date: AWSDate
  breakfast: String
  lunch: String
  dinner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDateConnection @aws_api_key @aws_iam {
  items: [Date]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDateFilterInput {
  id: ModelIDInput
  date: ModelStringInput
  breakfast: ModelStringInput
  lunch: ModelStringInput
  dinner: ModelStringInput
  and: [ModelDateFilterInput]
  or: [ModelDateFilterInput]
  not: ModelDateFilterInput
}

type Query {
  getDate(id: ID!): Date @aws_api_key @aws_iam
  listDates(filter: ModelDateFilterInput, limit: Int, nextToken: String): ModelDateConnection @aws_api_key @aws_iam
  syncDates(filter: ModelDateFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDateConnection @aws_api_key @aws_iam
}

input ModelDateConditionInput {
  date: ModelStringInput
  breakfast: ModelStringInput
  lunch: ModelStringInput
  dinner: ModelStringInput
  and: [ModelDateConditionInput]
  or: [ModelDateConditionInput]
  not: ModelDateConditionInput
}

input CreateDateInput {
  id: ID
  date: AWSDate
  breakfast: String
  lunch: String
  dinner: String
  _version: Int
}

input UpdateDateInput {
  id: ID!
  date: AWSDate
  breakfast: String
  lunch: String
  dinner: String
  _version: Int
}

input DeleteDateInput {
  id: ID!
  _version: Int
}

type Mutation {
  createDate(input: CreateDateInput!, condition: ModelDateConditionInput): Date @aws_api_key @aws_iam
  updateDate(input: UpdateDateInput!, condition: ModelDateConditionInput): Date @aws_api_key @aws_iam
  deleteDate(input: DeleteDateInput!, condition: ModelDateConditionInput): Date @aws_api_key @aws_iam
}

input ModelSubscriptionDateFilterInput {
  id: ModelSubscriptionIDInput
  date: ModelSubscriptionStringInput
  breakfast: ModelSubscriptionStringInput
  lunch: ModelSubscriptionStringInput
  dinner: ModelSubscriptionStringInput
  and: [ModelSubscriptionDateFilterInput]
  or: [ModelSubscriptionDateFilterInput]
}

type Subscription {
  onCreateDate: Date @aws_subscribe(mutations: ["createDate"]) @aws_api_key @aws_iam
  onUpdateDate: Date @aws_subscribe(mutations: ["updateDate"]) @aws_api_key @aws_iam
  onDeleteDate: Date @aws_subscribe(mutations: ["deleteDate"]) @aws_api_key @aws_iam
}

